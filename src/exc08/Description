                                Двусвязные списки.
    Потенциальным недостатком связанных списков является сложность перемещения по списку в обратном направлении.
Команда вида

current = current.next

позволяет легко перейти к следующему элементу списк, но соответствующего способа перехода к предыдущему элементу
не существует. Это ограниченин создает проблемы. Допустим, в текстовом редакторе связанный список используется
для хранения текста. Каждая сторока на экране хранится в виде объекта String, встроенного в элемент списка. Когда
пользователь перемещает курсор вниз по экрану, программа переходит к следующему элементу списка для обработки или
вывода следующей строки. Но что произойдет если пользователь переместит курсор вверх? При использовании обычного
связанного списка придется вернуть переменную current к началу списка, затем перебрать все элементы до предыдущего
элемента. Такой способ не эффективен -  перемещение к предыдущей строке должно осуществляться за один шаг.
    Двусвязный список представляет такую возможность. Он позволяет перемещаться по списку как в прямом, так и в
обратном направлении. Каждый элемент хранит ссылку на два других элемента вместо одного. Первая ссылка указывает
на следующий элемент, как и обычных списках. Вторая ссылка указывает на предыдущий элемент.
    К НЕДОСТАТКАМ двусвязных списков следуеть отнести то, что при каждой вставке или удалении ссылк вам приходится
изменять четыре ссылки вместо двух: две связи с предыдущим элементом и две связи со слудующим элементом. И конечно
каждый элемент списка занимает чуть больше места из-за дополнительной ссылки.
    Двусвязный список на обязан быть двусторонним(то есть ссылка на последний элемент не обязана храниться в
объекте списка).
