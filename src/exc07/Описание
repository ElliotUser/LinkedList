                                        Сортировка методом вставки.
    Сортированный список может использоваться в качестве достаточно эффективного механизма сортировки.
Допустим, у вас имеется массив с несортированными данными. Если последовательно читать элементы из мас-
сива и вставлять их в сортированный список, они будут автоматически отсортированы. Остается извлечь их
из списка и поместить обратно в массив — они будут отсортированы.
    Подобный вид сортировки заметно превосходит по эффективности обычные виды сортировки методом вставки
в массиве, потому что она требует меньшего количества операций копирования. Она также выполняется за вре-
мя O(N^2), потому что при вставке в сортированный список каждый элемент приходится сравнивать в среднем
с половиной элементов, уже находящихся в списке; для N вставляемых элементов количество сравнений составит
N^2/4. Однако каждый элемент в этом случае копируется только два раза: из массива в список и из списка в
массив. N×2 операций копирования выгодно отличается от сортировки методом вставки в массив, требующей в
среднем N^2 таких операций.

Программа listInsertionSort.java
    Программа создает несортированный массив элементов типа link, вставляет их в сортированный список (с
использованием конструктора), после чего удаляет и помещает обратно в массив.
    Новый конструктор SortedList получает в аргументе массив объектов Link и вставляет все содержимое мас-
сива в созданный список. Это упрощает работу со списком для клиента (метода main()).
    Н е д о с т а т о к сортировки методом вставки в список (по сравнению с сортировкой методом вставки в
массив) заключается в том, что она занимает вдвое больше памяти, так как массив и связанный список должны
находиться в памяти одновременно. И все же, если у вас имеется готовый класс сортированного списка, такой
способ сортировки хорошо подходит для не очень больших массивов.
