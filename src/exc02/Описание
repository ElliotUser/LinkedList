                Поиск и удаление заданных элементов.
    Программа дополняется новыми методами для поиска и удаления из списка элемента
с заданным значением ключа.
    Метод main() создает список, вставляет четыре элемента и выводит содержимое полу-
ченного списка. Затем он ищет элемент с ключом 44, удаляет элемент с ключом 66 и снова
выводит измененный список.

Метод find():
    Ссылка current, изначально содержащая указатель first, перебирает ссылки по цепочке,
    для чего ей многократно присваивается current.next. Для каждого элемента списка find()
    проверяет, совпадает ли ключ данного элемента с искомым. Если ключи совпадают, метод
    возвращает ссылку на текущий элемент. Если find() доходит до конца списка, так и не
    обнаружив нужной ссылки, возвращается null.

Метод delete():
    Для поиска удаляемого элемента метод delete() использует тот же способ, что и метод find().
Однако этот метод должен хранить ссылку не только на текущий элемент списка (current), но и на
предыдущий элемент (previous). Это необходимо из-за того, что при удалении текущего элемента
метод должен связать предыдущий элемент со следующим.Чтобы обратиться к предыдущему элементу,
необходимо сохранить ссылку на него.На каждой итерации цикла while, непосредственно перед зане-
сением в current значения current.next, в поле previous заносится текущее значение current. Таким
образом, previous указывает на элемент списка, предшествующий current.
    Чтобы удалить текущий элемент после обнаружения совпадения, полю next предыдущего элемента при-
сваивается значение next текущего элемента. Необходимо учесть особый случай, когда текущий элемент
является первым в списке, потому что ссылка на него хранится в поле first объекта LinkList, а не в
другом элементе списка. В этом случае удаление элемента осуществляется занесением в first ссылки из
first.next, как в методе deleteFirst().